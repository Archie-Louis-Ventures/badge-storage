name: codecoverage-store
on:
  workflow_call:
    inputs:
      coverage:
        required: true
        type: string
        default: "0%"
      repo_name:
        required: true
        type: string
        default: "NA"
      color:
        required: false
        type: string
        default: "orange"
    secrets:
      PAT_TOKEN:
        required: true
        
  workflow_dispatch:
    inputs:
      coverage:
        description: 'Coverage percentage (e.g. 85%)'
        required: true
        default: '0%'
        type: string
      repo_name:
        description: 'Repository name'
        required: true
        type: string
      color:
        description: 'Badge color (red, orange, yellow, green, brightgreen, etc.)'
        required: false
        default: 'orange'
        type: string

jobs:
  coverage-badge:
    runs-on: self-hosted
    steps:
      - name: Calculate badge color if not provided
        if: ${{ !inputs.color || inputs.color == 'auto' }}
        id: calculate-color
        run: |
          # Extract number from coverage percentage (remove the % sign)
          COVERAGE_NUM=$(echo "${{ inputs.coverage }}" | sed 's/%//')
          
          # Determine color based on coverage percentage
          if (( $(echo "$COVERAGE_NUM >= 90" | bc -l) )); then
            echo "badge_color=brightgreen" >> $GITHUB_ENV
          elif (( $(echo "$COVERAGE_NUM >= 80" | bc -l) )); then
            echo "badge_color=green" >> $GITHUB_ENV
          elif (( $(echo "$COVERAGE_NUM >= 70" | bc -l) )); then
            echo "badge_color=yellowgreen" >> $GITHUB_ENV
          elif (( $(echo "$COVERAGE_NUM >= 60" | bc -l) )); then
            echo "badge_color=yellow" >> $GITHUB_ENV
          elif (( $(echo "$COVERAGE_NUM >= 50" | bc -l) )); then
            echo "badge_color=orange" >> $GITHUB_ENV
          else
            echo "badge_color=red" >> $GITHUB_ENV
          fi
      
      - name: Set badge color from input if provided
        if: ${{ inputs.color && inputs.color != 'auto' }}
        run: echo "badge_color=${{ inputs.color }}" >> $GITHUB_ENV
      
      - name: Create badge JSON content
        id: create-content
        run: |
          # Create badge content and encode to base64
          BADGE_CONTENT=$(cat <<EOF
          {
            "schemaVersion": 1,
            "label": "coverage",
            "message": "${{ inputs.coverage }}",
            "color": "${{ env.badge_color }}"
          }
          EOF
          )
          
          # Encode content to base64 (required by GitHub API)
          ENCODED_CONTENT=$(echo -n "$BADGE_CONTENT" | base64 -w 0)
          echo "encoded_content=$ENCODED_CONTENT" >> $GITHUB_ENV
      
      - name: Check if file exists
        id: check-file
        run: |
          FILE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/Archie-Louis-Ventures/codecove-badge/contents/codecov-${{ inputs.repo_name }}.json)
          
          if echo "$FILE_INFO" | grep -q "sha"; then
            # File exists, get its SHA
            SHA=$(echo "$FILE_INFO" | jq -r .sha)
            echo "file_exists=true" >> $GITHUB_ENV
            echo "file_sha=$SHA" >> $GITHUB_ENV
          else
            echo "file_exists=false" >> $GITHUB_ENV
          fi
      
      - name: Update existing badge file
        if: ${{ env.file_exists == 'true' }}
        run: |
          curl -X PUT -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/Archie-Louis-Ventures/codecove-badge/contents/codecov-${{ inputs.repo_name }}.json \
            -d @- << EOF
          {
            "message": "Update code coverage badge for ${{ inputs.repo_name }} (${{ inputs.coverage }})",
            "content": "${{ env.encoded_content }}",
            "sha": "${{ env.file_sha }}"
          }
          EOF
      
      - name: Create new badge file
        if: ${{ env.file_exists == 'false' }}
        run: |
          curl -X PUT -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/Archie-Louis-Ventures/codecove-badge/contents/codecov-${{ inputs.repo_name }}.json \
            -d @- << EOF
          {
            "message": "Create code coverage badge for ${{ inputs.repo_name }} (${{ inputs.coverage }})",
            "content": "${{ env.encoded_content }}"
          }
          EOF
